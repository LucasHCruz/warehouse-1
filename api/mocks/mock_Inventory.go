// Code generated by MockGen. DO NOT EDIT.
// Source: ../db/inventory.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	data "github.com/aukaskavalci/IKEA_assesment/data"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockInventory is a mock of Inventory interface
type MockInventory struct {
	ctrl     *gomock.Controller
	recorder *MockInventoryMockRecorder
}

// MockInventoryMockRecorder is the mock recorder for MockInventory
type MockInventoryMockRecorder struct {
	mock *MockInventory
}

// NewMockInventory creates a new mock instance
func NewMockInventory(ctrl *gomock.Controller) *MockInventory {
	mock := &MockInventory{ctrl: ctrl}
	mock.recorder = &MockInventoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInventory) EXPECT() *MockInventoryMockRecorder {
	return m.recorder
}

// Ping mocks base method
func (m *MockInventory) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping
func (mr *MockInventoryMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockInventory)(nil).Ping))
}

// Open mocks base method
func (m *MockInventory) Open() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open")
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open
func (mr *MockInventoryMockRecorder) Open() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockInventory)(nil).Open))
}

// GetInventory mocks base method
func (m *MockInventory) GetInventory(ctx context.Context) (error, []data.Stock) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInventory", ctx)
	ret0, _ := ret[0].(error)
	ret1, _ := ret[1].([]data.Stock)
	return ret0, ret1
}

// GetInventory indicates an expected call of GetInventory
func (mr *MockInventoryMockRecorder) GetInventory(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInventory", reflect.TypeOf((*MockInventory)(nil).GetInventory), ctx)
}

// GetProductStock mocks base method
func (m *MockInventory) GetProductStock(ctx context.Context) (error, data.ProductStocks) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductStock", ctx)
	ret0, _ := ret[0].(error)
	ret1, _ := ret[1].(data.ProductStocks)
	return ret0, ret1
}

// GetProductStock indicates an expected call of GetProductStock
func (mr *MockInventoryMockRecorder) GetProductStock(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductStock", reflect.TypeOf((*MockInventory)(nil).GetProductStock), ctx)
}

// UploadProducts mocks base method
func (m *MockInventory) UploadProducts(ctx context.Context, product data.Products) (error, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadProducts", ctx, product)
	ret0, _ := ret[0].(error)
	ret1, _ := ret[1].(int)
	return ret0, ret1
}

// UploadProducts indicates an expected call of UploadProducts
func (mr *MockInventoryMockRecorder) UploadProducts(ctx, product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadProducts", reflect.TypeOf((*MockInventory)(nil).UploadProducts), ctx, product)
}

// UploadInventory mocks base method
func (m *MockInventory) UploadInventory(ctx context.Context, inventory data.Inventory) (error, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadInventory", ctx, inventory)
	ret0, _ := ret[0].(error)
	ret1, _ := ret[1].(int)
	return ret0, ret1
}

// UploadInventory indicates an expected call of UploadInventory
func (mr *MockInventoryMockRecorder) UploadInventory(ctx, inventory interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadInventory", reflect.TypeOf((*MockInventory)(nil).UploadInventory), ctx, inventory)
}

// SellProduct mocks base method
func (m *MockInventory) SellProduct(ctx context.Context, productName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SellProduct", ctx, productName)
	ret0, _ := ret[0].(error)
	return ret0
}

// SellProduct indicates an expected call of SellProduct
func (mr *MockInventoryMockRecorder) SellProduct(ctx, productName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SellProduct", reflect.TypeOf((*MockInventory)(nil).SellProduct), ctx, productName)
}
